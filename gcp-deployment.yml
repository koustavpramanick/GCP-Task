apiVersion: apps/v1
kind: Deployment
metadata:
  name: delivey-service
  namespace: gcp-task
spec:
  selector:
    matchLabels:
      app: delivey-service
  replicas: 1
  template:
    metadata:
      labels:
        app: delivey-service
    spec:
      containers:
        - name: delivey-service
          image: koustav12/delivery
          ports:
            - containerPort: 8083
         

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-service
  namespace: gcp-task
spec:
  selector:
    matchLabels:
      app: customer-service
  replicas: 1
  template:
    metadata:
      labels:
        app: customer-service
    spec:
      containers:
        - name: customer-service 
          image: koustav12/customer
          ports:
            - containerPort: 8081
          #env:   # Setting Enviornmental Variables
            #- name: EUREKA_SERVER_URI
            #  value: http://naming-server
            #- name: DB_HOST   # Setting Database host address from configMap
            #  value: mysql

            #- name: DB_NAME  # Setting Database name from configMap
            #  value: newdb

            #- name: DB_USERNAME  # Setting Database username from Secret
            #  value: root

            #- name: DB_PASSWORD # Setting Database password from Secret
            #  value: root

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: gcp-task
spec:
  selector:
    matchLabels:
      app: order-service
  replicas: 1
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
        - name: order-service 
          image: koustav12/order
          ports:
            - containerPort: 8082


---
apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: customer-service
  namespace: gcp-task
spec:
  selector:
    app: customer-service
  ports:
    - protocol: "TCP"
      port: 8081 # The port that the service is running on in the cluster
      targetPort: 8081 # The port exposed by the service
  type: LoadBalancer # type of the service.
---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: delivery-service
  namespace: gcp-task
spec:
  selector:
    app: delivey-service
  ports:
    - protocol: "TCP"
      port: 8083 # The port that the service is running on in the cluster
      targetPort: 8083 # The port exposed by the service
  type: LoadBalancer # type of the service.
---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: order-service
  namespace: gcp-task
spec:
  selector:
    app: order-service
  ports:
    - protocol: "TCP"
      port: 8082 # The port that the service is running on in the cluster(this is used to access from website)
      targetPort: 8082 # The port exposed by the service
  type: LoadBalancer # type of the service.
